// Generated by gencpp from file pad_msgs/server2client.msg
// DO NOT EDIT!


#ifndef PAD_MSGS_MESSAGE_SERVER2CLIENT_H
#define PAD_MSGS_MESSAGE_SERVER2CLIENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pad_msgs
{
template <class ContainerAllocator>
struct server2client_
{
  typedef server2client_<ContainerAllocator> Type;

  server2client_()
    : info()
    , index(0)
    , x(0.0)
    , y(0.0)  {
    }
  server2client_(const ContainerAllocator& _alloc)
    : info(_alloc)
    , index(0)
    , x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _info_type;
  _info_type info;

   typedef int32_t _index_type;
  _index_type index;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::pad_msgs::server2client_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pad_msgs::server2client_<ContainerAllocator> const> ConstPtr;

}; // struct server2client_

typedef ::pad_msgs::server2client_<std::allocator<void> > server2client;

typedef boost::shared_ptr< ::pad_msgs::server2client > server2clientPtr;
typedef boost::shared_ptr< ::pad_msgs::server2client const> server2clientConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pad_msgs::server2client_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pad_msgs::server2client_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pad_msgs::server2client_<ContainerAllocator1> & lhs, const ::pad_msgs::server2client_<ContainerAllocator2> & rhs)
{
  return lhs.info == rhs.info &&
    lhs.index == rhs.index &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pad_msgs::server2client_<ContainerAllocator1> & lhs, const ::pad_msgs::server2client_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pad_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pad_msgs::server2client_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pad_msgs::server2client_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pad_msgs::server2client_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pad_msgs::server2client_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pad_msgs::server2client_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pad_msgs::server2client_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pad_msgs::server2client_<ContainerAllocator> >
{
  static const char* value()
  {
    return "327f857dbd91047d5cf7bac1e69e9943";
  }

  static const char* value(const ::pad_msgs::server2client_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x327f857dbd91047dULL;
  static const uint64_t static_value2 = 0x5cf7bac1e69e9943ULL;
};

template<class ContainerAllocator>
struct DataType< ::pad_msgs::server2client_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pad_msgs/server2client";
  }

  static const char* value(const ::pad_msgs::server2client_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pad_msgs::server2client_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string info\n"
"int32 index\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::pad_msgs::server2client_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pad_msgs::server2client_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info);
      stream.next(m.index);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct server2client_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pad_msgs::server2client_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pad_msgs::server2client_<ContainerAllocator>& v)
  {
    s << indent << "info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.info);
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAD_MSGS_MESSAGE_SERVER2CLIENT_H
